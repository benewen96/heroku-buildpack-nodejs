#!/usr/bin/env bash

####### Configure environment

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3
bp_dir=$(cd $(dirname $0); cd ..; pwd)
heroku_dir=$build_dir/.heroku
logfile=$heroku_dir/temp/node-log.txt

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

# Output version
status "Node.js Buildpack v63"

# Avoid GIT_DIR leak from previous build steps
unset GIT_DIR

# Create directories & log file
mkdir -p $heroku_dir/node
mkdir -p $heroku_dir/temp
touch $logfile

# Trap errors
trap tail_error_log ERR

# Load config vars into environment; start with defaults
npm_config_production=true
clean_build=false

if [ -d "$env_dir" ]; then
  export_env_dir $env_dir
fi

####### Determine current state

# What's the requested semver range for node?
node_engine=$(package_json ".engines.node")
[[ "$node_engine" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && node_is_exact=true || node_is_exact=false
node_previous=$(file_contents "$cache_dir/node/node-version")

# What's the requested semver range for npm?
npm_engine=$(package_json ".engines.npm")
[[ "$npm_engine" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && npm_is_exact=true || npm_is_exact=false
npm_previous=$(file_contents "$cache_dir/node/npm-version")

# How does this app start?
if test -d $build_dir/Procfile; then start_method="Procfile"
elif $(package_json ".scripts.start"); then start_method="npm start"
elif [ -f $build_dir/server.js ]; then start_method="server.js"
else start_method=""
fi

# What's the source-of-truth for node_modules?
if test -d $build_dir/node_modules; then modules_source="prebuilt"
elif test -f $build_dir/npm-shrinkwrap.json; then modules_source="npm-shrinkwrap.json"
elif test -f $build_dir/package.json; then modules_source="package.json"
else modules_source=""
fi

# What does our cache look like?
test -d $cache_dir/node/node_modules && modules_cached=true || modules_cached=false

####### Provide debugging info and feedback

echo ""
status "Node engine:         ${node_engine:-unspecified}"
status "Npm engine:          ${npm_engine:-default}"
status "Start mechanism:     ${start_method:-none}"
status "node_modules source: ${modules_source:-none}"
status "node_modules cached: $modules_cached"

echo ""

status "npm_config_production=$npm_config_production"
status "clean_build=$clean_build"

# Protips / warnings

if [ "$node_engine" == "" ]; then
  protip "Specify a node version in package.json" "https://devcenter.heroku.com/articles/nodejs-support#specifying-a-node-js-version"
elif [ "$node_engine" == "*" ]; then
  protip "Avoid semver ranges like '*' in engines.node" "https://devcenter.heroku.com/articles/nodejs-support#specifying-a-node-js-version"
elif [ ${node_engine:0:1} == ">" ]; then
  protip "Avoid semver ranges starting with '>' in engines.node" "https://devcenter.heroku.com/articles/nodejs-support#specifying-a-node-js-version"
fi

if [ "$modules_source" == "prebuilt" ]; then
  protip "Avoid checking node_modules into source control" "https://www.npmjs.org/doc/misc/npm-faq.html#should-i-check-my-node_modules-folder-into-git-"
fi

if [ "$start_method" == "" ]; then
  protip "Include a Procfile, package.json start script, or server.js file to start your app" "https://devcenter.heroku.com/articles/nodejs-support#runtime-behavior"
fi

####### Vendor in binaries

echo ""

# Resolve non-specific node versions using semver.io
if ! $node_is_exact; then
  status "Resolving node version ${node_engine:-(latest stable)} via semver.io..."
  node_engine=$(curl --silent --get --data-urlencode "range=${node_engine}" https://semver.io/node/resolve)
fi

# Download node from Heroku's S3 mirror of nodejs.org/dist
status "Downloading and installing node $node_engine..."
node_url="http://s3pository.heroku.com/node/v$node_engine/node-v$node_engine-linux-x64.tar.gz"
curl $node_url -s -o - | tar xzf - -C $heroku_dir/temp

# Move node (and npm) into .heroku/node and make them executable
mv $heroku_dir/temp/node-v$node_engine-linux-x64/* $heroku_dir/node
chmod +x $heroku_dir/node/bin/*
PATH=$heroku_dir/node/bin:$PATH

# Optionally bootstrap a different npm version
if [ "$npm_engine" != "" ]; then
  if ! $npm_is_exact; then
    status "Resolving npm version ${npm_engine} with semver.io..."
    npm_engine=$(curl --silent --get --data-urlencode "range=${npm_engine}" https://semver.io/npm/resolve)
  fi
  status "Downloading and installing npm $npm_engine (replacing version `npm --version`)..."
  npm install -g npm@$npm_engine &> $logfile
fi

# Run subsequent commands from the build directory
cd $build_dir

####### Build the project's dependencies

echo ""

# Did we bust the cache?
if [ "$node_previous" != "" ] && [ "$node_engine" != "$node_previous" ]; then
  cache_busted=true
elif [ "$npm_previous" != "" ] && [ "$npm_engine" != "$npm_previous" ]; then
  cache_busted=true
else
  cache_busted=false
fi

if [ "$modules_source" == "" ]; then
  status "Skipping dependencies"

elif [ $modules_source == "prebuilt" ]; then
  status "Rebuilding native modules for this architecture"
  npm rebuild &> $logfile

elif $modules_cached && ! $clean_build && ! $cache_busted; then
  status "Restoring node_modules from cache"
  cp -r $cache_dir/node/node_modules $build_dir/
  status "Pruning unused dependencies"
  npm prune &> $logfile
  status "Installing any new modules"
  npm install --userconfig $build_dir/.npmrc &> $logfile

else
  status "Installing node_modules"
  npm install --userconfig $build_dir/.npmrc &> $logfile
  status "Updating node_modules"
  npm update &> $logfile
  status "Deduping dependency tree"
  npm dedupe &> $logfile

fi

# Show the final dependency tree
echo ""
npm ls

####### Create a Procfile if possible

if [ "$start_method" != "" ] && [ "$start_method" != "Procfile" ]; then
  status "No Procfile found; Adding 'web: npm start' to new Procfile"
  echo "web: npm start" > $build_dir/Procfile
fi

####### Create the runtime environment (profile.d)

status "Building runtime environment"
mkdir -p $build_dir/.profile.d

# Runtime exports
echo "export PATH=\"\$HOME/.heroku/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";" > $build_dir/.profile.d/nodejs.sh
echo "export NODE_HOME=\"\$HOME/.heroku/node;" >> $build_dir/.profile.d/nodejs.sh

# Multi-buildpack exports
echo "export PATH=\"\$HOME/.heroku/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";" > $bp_dir/export
echo "export NODE_HOME=\"\$HOME/.heroku/node;" >> $bp_dir/export

####### Clean up

status "Cleaning up build artifacts"

# Clear temporary files
rm -rf $heroku_dir/temp

# Clean up after npm
rm -rf "$build_dir/.node-gyp"
rm -rf "$build_dir/.npm"

# Clear the cache
rm -rf $cache_dir/node

####### Build successful! Store results in cache

# Create the cache
mkdir -p $cache_dir/node

echo $node_engine > $cache_dir/node/node-version
echo $npm_engine > $cache_dir/node/npm-version

if test -d $build_dir/node_modules; then
  status "Caching node_modules for future builds"
  cp -r $build_dir/node_modules $cache_dir/node
fi
