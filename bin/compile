#!/usr/bin/env bash

####### Configure environment

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3
bp_dir=$(cd $(dirname $0); cd ..; pwd)
heroku_dir=$build_dir/.heroku

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

# Avoid GIT_DIR leak from previous build steps
status "Resetting git environment"
unset GIT_DIR

# Load config vars into environment
if [ -d "$env_dir" ]; then
  status "Exporting config vars to environment"
  export_env_dir $env_dir
fi

####### Find current states

# What was the last released node version?
if test -f $cache_dir/node/node-version; then
  previous_node_version=$(cat $cache_dir/node/node-version)
else
  previous_node_version=""
fi

# Is there a provided semver range for node?
semver_range=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .engines.node)
if [ "$semver_range" == "null" ]; then
  semver_range=""
  has_semver=false
  has_specific_version=false
else
  has_semver=true
  if [[ "semver_range" =~ "^\d+\.\d+\.\d+$" ]]; then
    has_specific_version=true
    node_version=semver_range
  else
    has_specific_version=false
    node_version=""
  fi
fi

# Start by assuming we can't start
start_method=""

# Does server.js exist?
if [ -f $build_dir/server.js ]; then
  has_server=true
  start_method="server.js"
else
  has_server=false
fi

# Can we use npm start (default = node server.js)?
npm_start=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .scripts.start)
if [ "$npm_start" != "null" ]; then
  has_start=true
  start_method="scripts.start"
else
  has_start=false
fi

# Is a Procfile provided?
if test -d $build_dir/Procfile; then
  has_procfile=true
  start_method="Procfile"
else
  has_procfile=false
fi

# Does node_modules dir already exist?
if test -d $build_dir/node_modules; then
  node_modules_exists=true
else
  node_modules_exists=false
fi

####### Provide debugging info and feedback

status "Node Buildpack v62"
status "Previous node version: ${previous_node_version:none}"
status "Requested node version: ${semver_range:missing}"
status "App startup method: $start_method"
status "node_modules already exists: $node_modules_exists"

if [ "$start_method" == "" ]; then
  status "Error: can't start!"
  status "You can fix this by creating any of the following:"
  status " - A Procfile"
  status " - A start script in package.json"
  status " - server.js in your project's root"
  exit 1
fi

if [ "$semver_range" == "" ]; then
  protip "You should specify a node version in package.json - defaulting to latest stable."
elif [ "$semver_range" == "*" ]; then
  protip "Avoid using semver ranges like '*' in engines.node"
elif [ ${semver_range:0:1} == ">" ]; then
  protip "Avoid using semver ranges starting with '>' in engines.node"
fi

if node_modules_exists; then
  protip "Avoid checking node_modules into source control: https://www.npmjs.org/doc/misc/npm-faq.html#should-i-check-my-node_modules-folder-into-git-"
fi

# Resolve non-specific node versions using semver.io
if [ ! has_specific_version ]; then
  status "Resolving node version $semver_range with semver.io..."
  node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)
fi
status "Resolved node version: $node_version"

# Create home for node
mkdir -p $heroku_dir/node
mkdir -p $heroku_dir/temp

# Download node from Heroku's S3 mirror of nodejs.org/dist
status "Downloading and installing node..."
node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
curl $node_url -s -o - | tar xzf - -C $heroku_dir/temp

# Move node (and npm) into .heroku/node and make them executable
mv $temp_dir/node-v$node_version-linux-x64 $heroku_dir/node
chmod +x $heroku_dir/node/bin/*
PATH=$heroku_dir/node/bin:$PATH

# Run subsequent commands from the build directory
cd $build_dir

# option 1: use node_modules checked into source control
if node_modules_exists; then
  status "Found existing node_modules directory; skipping cache"
  status "Rebuilding any native dependencies"
  npm rebuild 2>&1 | indent

# option 2: build node_modules from package.json
elif test -d $cache_dir/node/node_modules; then
  status "Restoring node_modules directory from cache"
  cp -r $cache_dir/node/node_modules $build_dir/

  status "Pruning cached dependencies not specified in package.json"
  npm prune 2>&1 | indent

  if test -f $cache_dir/node/node-version && [ $(cat $cache_dir/node/node-version) != "$node_version" ]; then
    status "Node version changed since last build; rebuilding dependencies"
    npm rebuild 2>&1 | indent
  fi

  status "Installing dependencies"
  npm install --userconfig $build_dir/.npmrc 2>&1 | indent    # Make npm output to STDOUT instead of its default STDERR
  npm update
  npm dedupe
fi

# Persist goodies like node-version in the slug
mkdir -p $build_dir/.heroku

# Save resolved node version in the slug for later reference
echo $node_version > $build_dir/.heroku/node-version

# Purge node-related cached content, being careful not to purge the top-level
# cache, for the sake of heroku-buildpack-multi apps.
rm -rf $cache_dir/node_modules # (for apps still on the older caching strategy)
rm -rf $cache_dir/node
mkdir -p $cache_dir/node

# If app has a node_modules directory, cache it.
if test -d $build_dir/node_modules; then
  status "Caching node_modules directory for future builds"
  cp -r $build_dir/node_modules $cache_dir/node
fi

# Copy goodies to the cache
cp -r $build_dir/.heroku $cache_dir/node

status "Cleaning up node-gyp and npm artifacts"
rm -rf "$build_dir/.node-gyp"
rm -rf "$build_dir/.npm"

# If Procfile is absent, try to create one using `npm start`
if [ ! -e $build_dir/Procfile ]; then
  npm_start=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .scripts.start)

  # If `scripts.start` is set in package.json, or a server.js file
  # is present in the app root, then create a default Procfile
  if [ "$npm_start" != "null" ] || [ -f $build_dir/server.js ]; then
    status "No Procfile found; Adding npm start to new Procfile"
    echo "web: npm start" > $build_dir/Procfile
  else
    status "Procfile not found and npm start script is undefined"
    protip "Create a Procfile or specify a start script in package.json"
  fi
fi


# Create .profile.d
status "Building runtime environment"
mkdir -p $build_dir/.profile.d

# Add binary locations to the PATH
echo "export PATH=\"\$HOME/vendor/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";" > $build_dir/.profile.d/nodejs.sh

# Default to NODE_ENV=production
echo "export NODE_ENV=${NODE_ENV:production}" >> $build_dir/.profile.d/nodejs.sh
